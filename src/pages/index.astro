---
import Counter from "../components/Counter.vue";
import Layout from "../layouts/Layout.astro";
---

<Layout
  title="Inicio"
  description="Codemaster construye soluciones digitales para tu empresa"
>
  <!-- <Counter client:load title="Title props" /> -->

  <section class="grid w-full h-screen place-items-center">
    <div
      id="chat"
      class="w-[450px] min-h-[500px] h-auto bg-gray-100 flex flex-col items-center justify-center"
    >
      <div
        id="alert"
        class="bg-red-100 hidden text-red-500 transition-all ease-out duration-200 text-center w-full p-2 rounded"
      >
      </div>
      <div class="w-[450px] bg-white border rounded p-3">
        <input
          type="text"
          id="user-input"
          class="w-full border border-gray-300 p-2"
          placeholder="Type your user..."
        />
        <input
          type="text"
          id="avatar-input"
          class="w-full border border-gray-300 p-2"
          placeholder="Type your avatar..."
        />
      </div>
      <h1 class="text-2xl font-bold py-4 border bg-white w-full text-center">
        Chat: general
      </h1>
      <div id="message-list" class="w-full overflow-auto grid gap-1"></div>
      <div class="flex items-center w-full mt-auto">
        <input
          type="text"
          id="message-input"
          class="w-full border border-gray-300 p-2"
          placeholder="Type your message..."
        />
        <button
          id="send-button"
          class="bg-blue-500 text-white px-4 py-2 rounded">Send</button
        >
      </div>
    </div>
  </section>
</Layout>

<script type="module">
  // import { io } from "https://cdn.socket.io/4.8.1/socket.io.esm.min.js";
  // const socket = io("ws://localhost:8080");

  // socket.on("connect", () => {
  //   console.log("Connected to server");
  // });

  // socket.on("connect_error", (error) => {
  //   if (socket.active) {
  //   } else {
  //     console.log(error.message);
  //   }
  // });

  // socket.on("message", (data) => {
  //   console.log("Received message:", data);
  // });

  // socket.on("disconnect", (reason, details) => {
  //   console.log("Disconnected from server:", reason, details);
  // });

  const userInput = document.getElementById("user-input");
  const alertMessage = document.getElementById("alert");
  const avatarInput = document.getElementById("avatar-input");

  const chat = document.querySelector("#chat > h1");
  const messageList = document.getElementById("message-list");
  const messageInput = document.getElementById("message-input");
  const sendButton = document.getElementById("send-button");

  console.log(chat.textContent.trim().split(":").at(1).trim());

  const wsocket = new WebSocket(
    `ws://localhost:8080/ws/${chat.textContent.trim().split(":").at(1).trim()}`
  );

  wsocket.addEventListener("open", (event) => {
    console.log("Connection established");
    // wsocket.send("Hello, server!");
  });

  const showAlertMessage = (message) => {
    alertMessage.textContent = message;
    alertMessage.classList.remove("hidden");
    setTimeout(() => {
      alertMessage.classList.add("hidden");
    }, 2000);
  };

  sendButton.addEventListener("click", () => {
    console.log(userInput.value, avatarInput.value, messageInput.value);

    if (userInput.value.length === 0) {
      showAlertMessage("Please enter a user");
      console.log("Please enter a user");

      return;
    }
    if (messageInput.value.length === 0) {
      showAlertMessage("Please enter a message");
      return;
    }

    wsocket.send(
      JSON.stringify({
        message: messageInput.value,
        user: userInput.value,
        avatar:
          avatarInput.value ||
          "https://cdn-icons-png.flaticon.com/512/149/149071.png",
        date: new Date().toLocaleString(),
      })
    );
    messageInput.value = "";
  });

  wsocket.addEventListener("message", (event) => {
    const messageParse = JSON.parse(event.data);
    console.log("Message from server: ", messageParse);
    const isMe = userInput.value === messageParse.user;
    const messageCard = document.createElement("div");
    const messageTemplate = `
    <div class="w-[max-content] ${isMe ? "justify-self-end" : "justify-self-start"}">
      <div class="flex items-center p-2 rounded ${isMe ? "bg-blue-500 text-white" : "bg-blue-100 text-black"}">
        <img
          class="w-10 h-10 rounded-full mr-2"
          src="${messageParse.avatar}"
          alt="${messageParse.user}"
        />
        <div class="flex flex-col">
          <span class="font-bold">${messageParse.user}</span>
          <span>${messageParse.message}</span>
        </div>
      </div>
      <span class="text-gray-500 text-sm text-${isMe ? "right" : "left"}">${messageParse.date}</span>
    </div>
  `;
    messageCard.innerHTML = messageTemplate;

    messageList.appendChild(messageCard);
  });
</script>
